version: 2.1

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Deploy AWS infrastructure"
          command: |
            aws cloudformation deploy \
            --stack-name prod-${CIRCLE_WORKFLOW_ID} \
            --template-file template.yml
      - run: return 1
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
          when: on_fail

  configure_infrastructure:
    docker:
        - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "e2:c9:22:04:6c:5c:91:d9:6b:fa:69:21:5b:be:a7:ad"
      - run:
          name: "Install dependencies"
          command: |
            apk add --update ansible
      - run:
          name: "Configure server"
          command: |
            ansible-playbook -i inventory main.yml
  
  smoke_test:
    docker: 
      - image: alpine:latest
    steps: 
      - run:
            name: "Install curl"
            command: |
              apk --no-cache add curl
      - run: 
          name: "Verify website is responding"
          command: |
            URL="https://google.com"
            if curl -s --head ${URL}
            then
              echo "It worked!"
              return 0
            else
              echo "It failed"
              return 1
            fi
  
  create_and_deploy_front_end:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Deploy AWS infrastructure"
          command: |
            aws cloudformation deploy \
            --stack-name "${CIRCLE_WORKFLOW_ID}" \
            --template-file bucket.yml \
            --parameter-overrides NAME="${CIRCLE_WORKFLOW_ID}"
      - run: aws s3 sync . s3://"${CIRCLE_WORKFLOW_ID}" --delete
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name "${CIRCLE_WORKFLOW_ID}""
          when: on_fail

  get_last_deployment_id:
    docker:
        - image: cibuilds/aws:1.16.1
    steps:
      - checkout
      - run:
          name: "Get last deployment ID"
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  
  promote_to_production:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Promote to production"
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"

  clean_up_old_front_end:
    docker:
        - image: cibuilds/aws:1.16.1
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Clean up old environment
          command: |
            PreviousPipelineID=$(cat ~/output.txt)
            aws s3 rm "s3://${PreviousPipelineID}" --recursive
            aws cloudformation delete-stack --stack-name "${PreviousPipelineID:0:7}"

workflows:
  playground:
    jobs:
      # - create_infrastructure
      # - configure_infrastructure
      # - smoke_test

      - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
            - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id